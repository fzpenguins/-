// Code generated by hertz generator.

package api

import (
	"context"
	"log"

	api "grpc/biz/model/api"
	"grpc/biz/service"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// Insert .
// @router /user/image/insert [POST]
func Insert(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.InsertRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.InsertResponse)
	ret, err := service.NewPictureService(ctx).Insert(req.URL)
	if err != nil {
		log.Println("err = ", err)
		return
	}

	resp.Image = &api.Image{
		URL: ret.Url,
		Pid: ret.Pid,
	}
	resp.Base = &api.BaseResp{
		Msg:  "success",
		Code: 10000,
	}
	c.JSON(consts.StatusOK, resp)
}

// SearchByImage .
// @router /user/image/search [POST]
func SearchByImage(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.SearchByImageRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.SearchResponse)
	ret, err := service.NewPictureService(ctx).SearchByImage(req.URL)
	if err != nil {
		log.Println("err = ", err)
		return
	}

	resp.Images = make([]*api.Image, len(ret))

	for i, r := range ret {
		image := &api.Image{
			URL: r.Url,
			Pid: r.Pid,
		}
		resp.Images[i] = image
	}
	resp.Base = &api.BaseResp{
		Msg:  "success",
		Code: 10000,
	}
	c.JSON(consts.StatusOK, resp)
}
